[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curso de Python",
    "section": "",
    "text": "1 Introdução\nBem-vindo ao Curso de Python para Análise de Dados! Este curso foi cuidadosamente desenvolvido para introduzir você às ferramentas e técnicas fundamentais necessárias para trabalhar com dados de forma eficiente e profissional. Python é uma das linguagens mais utilizadas no mundo da ciência de dados, graças à sua simplicidade, flexibilidade e poderosas bibliotecas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução</span>"
    ]
  },
  {
    "objectID": "index.html#objetivo-do-curso",
    "href": "index.html#objetivo-do-curso",
    "title": "Curso de Python",
    "section": "1.1 Objetivo do Curso",
    "text": "1.1 Objetivo do Curso\nO objetivo principal deste curso é capacitar você a realizar análises de dados desde a coleta, manipulação e visualização até a exportação de relatórios. Ao final do curso, você será capaz de: - Manipular grandes conjuntos de dados com eficiência. - Criar visualizações impactantes que auxiliam na tomada de decisões. - Aplicar técnicas exploratórias para compreender padrões e tendências nos dados.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução</span>"
    ]
  },
  {
    "objectID": "index.html#público-alvo",
    "href": "index.html#público-alvo",
    "title": "Curso de Python",
    "section": "1.2 Público-Alvo",
    "text": "1.2 Público-Alvo\nEste curso é voltado para: - Iniciantes do curso que desejam iniciar seus estudos em Python para Análise de Dados - Estudantes que procuram uma introdução sólida à ciência de dados.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução</span>"
    ]
  },
  {
    "objectID": "index.html#estrutura-do-curso",
    "href": "index.html#estrutura-do-curso",
    "title": "Curso de Python",
    "section": "1.3 Estrutura do Curso",
    "text": "1.3 Estrutura do Curso\nO curso está dividido em módulos que cobrem tópicos essenciais de forma progressiva:\n\nPython Básico  Aprenda os fundamentos da linguagem Python, incluindo sintaxe, estruturas de controle, manipulação de variáveis e funções.\nNumpy\nDescubra como manipular arrays numéricos e realizar cálculos matemáticos com eficiência.\nPandas Explore como carregar, manipular e analisar dados tabulares usando DataFrames e Series.\nMatplotlib e Seaborn Domine as ferramentas de visualização de dados para criar gráficos informativos e visuais.\nRelatório de Análise de Dados Combine todas as ferramentas aprendidas para realizar análises exploratórias completas e gerar relatórios que apresentam insights valiosos.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução</span>"
    ]
  },
  {
    "objectID": "index.html#metodologia",
    "href": "index.html#metodologia",
    "title": "Curso de Python",
    "section": "1.4 Metodologia",
    "text": "1.4 Metodologia\nO curso combina teoria com prática, oferecendo: - Aulas explicativas: Conceitos apresentados de forma clara e objetiva. - Exemplos práticos: Demonstração de como aplicar as ferramentas e técnicas no mundo real. - Exercícios e projetos: Oportunidade de praticar e consolidar o aprendizado com desafios variados.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução</span>"
    ]
  },
  {
    "objectID": "index.html#pré-requisitos",
    "href": "index.html#pré-requisitos",
    "title": "Curso de Python",
    "section": "1.5 Pré-requisitos",
    "text": "1.5 Pré-requisitos\n\nConhecimento básico em informática.\nNenhuma experiência prévia em programação é necessária, embora seja desejável.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução</span>"
    ]
  },
  {
    "objectID": "index.html#ferramentas-necessárias",
    "href": "index.html#ferramentas-necessárias",
    "title": "Curso de Python",
    "section": "1.6 Ferramentas Necessárias",
    "text": "1.6 Ferramentas Necessárias\n\nPython 3.7 ou superior.\nJupyter Notebook (recomendado), Programiz, Google Colaboratory, Jupyter Notebook Online ou qualquer editor de código, como VSCode.\nInstalação das bibliotecas: numpy, pandas, matplotlib, seaborn.\n\n\nEsperamos que este curso seja uma jornada enriquecedora, ajudando você a adquirir habilidades práticas e teóricas para trabalhar com dados de forma confiante. Vamos começar!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução</span>"
    ]
  },
  {
    "objectID": "basic.html",
    "href": "basic.html",
    "title": "2  1º Módulo: Python Básico",
    "section": "",
    "text": "2.1 O que é Python?\nPython é uma linguagem de programação. Isso significa basicamente duas coisas:\nOu seja, podemos escrever um documento - que chamamos de código fonte - em Python para o computador ler e realizar nossos desejos e tarefas. Mas porque usar Python? Python tem algumas características interessantes:\nPor essas e várias outras características, Python se torna uma linguagem simples, bela, legível e amigável. É uma linguagem utilizada por diversas empresas, como Wikipedia, Google, Yahoo!, CERN, NASA, Facebook, Amazon, Instagram, Spotify.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#o-que-é-python",
    "href": "basic.html#o-que-é-python",
    "title": "2  1º Módulo: Python Básico",
    "section": "",
    "text": "Existem regras que determinam como as palavras são dispostas, já que é uma linguagem;\nO texto descreve instruções para o computador realizar tarefas.\n\n\n\nÉ interpretada, ou seja, o interpretador do Python executa o código fonte diretamente, traduzindo cada trecho para instruções de máquina;\nÉ de alto nível, ou seja, o interpretador se vira com detalhes técnicos do computador. Assim, desenvolver um código é mais simples do que em linguagens de baixo nível, nas quais o programador deve se preocupar com detalhes da máquina;\nÉ de propósito geral, ou seja, podemos usar Python para desenvolver programas em diversas áreas. Ao contrário de linguagens de domínio específico, que são especializadas e atendem somente a uma aplicação específica;\nTêm tipos dinâmicos, ou seja, o interpretador faz a magia de descobrir o que é cada variável.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#instalação-anaconda-e-primeiro-contato-com-o-jupyter-notebook",
    "href": "basic.html#instalação-anaconda-e-primeiro-contato-com-o-jupyter-notebook",
    "title": "2  1º Módulo: Python Básico",
    "section": "2.2 Instalação (Anaconda) e primeiro contato com o Jupyter Notebook",
    "text": "2.2 Instalação (Anaconda) e primeiro contato com o Jupyter Notebook\nAcesse o link para realizar o download da Distribuição Anaconda: https://www.anaconda.com/download\nComo material de auxílio para instalação, veja o video do YouTube: vídeo de suporte\nQualquer dúvida, entrem em contato comigo:\n\nEmail: breno.silva@icen.ufpa.br\nTelefone: (91) 9 8120-3378",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#sintaxe-básica",
    "href": "basic.html#sintaxe-básica",
    "title": "2  1º Módulo: Python Básico",
    "section": "2.3 Sintaxe Básica",
    "text": "2.3 Sintaxe Básica\n\n2.3.1 Função print()\nVamos começar com o famoso e clássico, Hello World, em Python.\n\n\nCódigo\nprint(\"Hello, World!\")\n\n\nHello, World!\n\n\nEm programação, é muito comum utilizar a palavra imprimir (ou print, em inglês) como sinônimo de mostrar algo na tela.\nprint() é uma função nativa do Python. Basta colocar algo dentro dos parênteses que o Python se encarrega de fazer a magia de escrever na tela! :)\n\n2.3.1.1 Erros Comuns:\n\nUsar a letra P maiúscula ao invés de minúscula:\n\n[Input]  : Print(\"Hello World!\")\n[Output] : NameError: name 'Print' is not defined\n\nEsquecer de abrir e fechar aspas no texto que é passado para a função print():\n\n[Input]  : print(Hello, World!)\n[Output] : SyntaxError: invalid syntax\n\nEsquecer de abrir ou fechar as aspas:\n\n[Input]  : print(\"Hello, World!)\n[Output] : SyntaxError: unterminated string literal (detected at line 1)\n\nComeçar com aspas simples e terminar com aspas duplas ou vice-versa:\n\n[Input]  : print('Hello, World!\")\n[Output] : SyntaxError: unterminated string literal (detected at line 1)\nMas, e se eu precisar usar aspas dentro do texto a ser mostrado na tela? Bem, caso queira imprimir aspas duplas ou apas simples, siga os dois exemplos abaixo:\n\n\nCódigo\nprint('Python é legal! Mas não o \"legal\" como dizem pra outras coisas')\n\n\nPython é legal! Mas não o \"legal\" como dizem pra outras coisas\n\n\nCódigo\nprint(\"Python é legal! Mas não o 'legal' como dizem pra outras coisas\")\n\n\nPython é legal! Mas não o 'legal' como dizem pra outras coisas\n\n\nE como faz para imprimir um texto em várias linhas? Bom, para isso precisamos lembrar de um caractere especial, a quebra de linha: \\n. Esse n é um caractere especial que significa aqui acaba a linha, o que vier depois deve ficar na linha de baixo. Por exemplo:\n\n\nCódigo\nprint(\"Veja esse texto. \\n Aspas duplas: \\\" \\n Aspas simples: '\")\n\n\nVeja esse texto. \n Aspas duplas: \" \n Aspas simples: '\n\n\n\n\n\n2.3.2 Operadores matemáticos\nA linguagem Python possui operadores que utilizam símbolos especiais para representar operações de cálculos, assim como na matemática:\n\nOperação de Soma/Adição (\\(+\\)) & Operação de Subtração (\\(-\\)):\n\n\n\nCódigo\n2 + 3\n\n\n5\n\n\n\n\nCódigo\n1.77 + 4.95\n\n\n6.720000000000001\n\n\n\n\nCódigo\n6 - 4\n\n\n2\n\n\n\n\nCódigo\n7 - 8\n\n\n-1\n\n\n\nOperação de Multiplicação/Produto (\\(*\\)) & Operação de Divisão (\\(/\\)):\n\n\n\nCódigo\n7 * 8\n\n\n56\n\n\n\n\nCódigo\n7.5 * 8.9\n\n\n66.75\n\n\n\n\nCódigo\n2 * 2 * 2\n\n\n8\n\n\n\n\nCódigo\n10 / 3\n\n\n3.3333333333333335\n\n\n\n\nCódigo\n666 / 137\n\n\n4.861313868613139\n\n\n\n\nCódigo\n50 / 0.75\n\n\n66.66666666666667\n\n\nE se fizermos uma divisão por zero?\n[Input]  : 1 / 0\n[Output] : ZeroDivisionError: division by zero\n\nOutras formas de dividir:\n\n\nDivisão inteira ( \\(//\\) ):\n\n\n\nCódigo\n10 // 3\n\n\n3\n\n\n\n\nCódigo\n666 // 137\n\n\n4\n\n\n\n\nCódigo\n50 // 0.75\n\n\n66.0\n\n\n\nResto da Divisão ( \\(\\%\\) ):\n\n\n\nCódigo\n1 % 2\n\n\n1\n\n\n\n\nCódigo\n4 % 2\n\n\n0\n\n\n\n\nCódigo\n9 % 3\n\n\n0\n\n\nAgora que aprendemos os operadores aritméticos básicos podemos seguir adiante. Como podemos calcular 210 ? O jeito mais óbvio seria multiplicar o número dois dez vezes:\n\n\nCódigo\n2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n\n\n1024\n\n\nPorém, isso não é muito prático, pois há um operador específico para isso, chamado de Potenciação/Exponenciação: ( \\(**\\) ):\n\n\nCódigo\n2 ** 10\n\n\n1024\n\n\n\n\nCódigo\n10 ** 3\n\n\n1000\n\n\n\n\nCódigo\n9 ** 0\n\n\n1\n\n\nE a raiz quadrada? Lembrando que \\(\\sqrt{x} = x^{\\frac{1}{2}}\\), então podemos calcular a raiz quadrada do seguinte modo:\n\n\nCódigo\n81 ** 0.5\n\n\n9.0\n\n\nPorém, a maneira mais recomendada para fazer isso é usar a função sqrt() da biblioteca math:\n\n\nCódigo\nimport math\nmath.sqrt(81)\n\n\n9.0\n\n\nNa primeira linha do exemplo importamos, da biblioteca padrão do Python, o módulo math e então usamos a sua função sqrt() para calcular \\(\\sqrt{81}\\). Não esqueça que é preciso ter executado import math antes de usar as funções e constantes dessa biblioteca.\n\n\n2.3.3 Expressões Numéricas\nAgora que já aprendemos diversos operadores, podemos combiná-los e resolver problemas mais complexos:\n\n\nCódigo\n3 + 4 * 2\n\n\n11\n\n\n\n\nCódigo\n7 + 3 * 6 - 4 ** 2\n\n\n9\n\n\n\n\nCódigo\n(3 + 4) * 2\n\n\n14\n\n\n\n\nCódigo\n1 / (8 / 4) ** (5 - 2)\n\n\n0.125\n\n\nQuando mais de um operador aparece em uma expressão, a ordem de avaliação depende das regras de precedência. O Python segue as mesmas regras de precedência da matemática. O acrônimo PEMDAS ajuda a lembrar essa ordem:\n\nParênteses\nExponenciação\nMultiplicação e Divisão (mesma precedência)\nAdição e Subtração (mesma precedência)\n\n\n2.3.3.1 Nota:\nVocê observou um comportamento inesperado ao trabalhar com números decimais em Python, mas isso não é um erro no seu código ou na linguagem. Na verdade, essa é uma característica inerente à forma como os computadores representam números de ponto flutuante.\nPor que isso acontece?\nA maioria dos computadores utiliza a representação binária (base 2) para armazenar números. O problema é que muitas frações decimais (base 10), como 0.1, não podem ser representadas exatamente como frações binárias. Isso ocorre porque a representação binária tem um número finito de dígitos, assim como a representação decimal.\nImagine tentar representar 1/3 em decimal: 0.33333… A sequência de 3’s se repete infinitamente. Da mesma forma, ao converter 0.1 para binário, obtemos uma fração infinita.\nIEEE 754 e a precisão limitada:\nA maioria dos computadores modernos utiliza o padrão IEEE 754 para representar números de ponto flutuante. Esse padrão define como os números são armazenados em memória, incluindo a precisão. Em Python, os números de ponto flutuante geralmente correspondem à precisão dupla do IEEE 754, que oferece 53 bits de precisão.\nQuando você digita 0.1 em Python, o computador tenta encontrar a fração binária mais próxima que possa ser representada com esses 53 bits. O resultado é um valor muito próximo de 0.1, mas não exatamente igual.\nImplicações práticas:\nEssa limitação na representação de números em ponto flutuante pode levar a pequenos erros de arredondamento em cálculos. Por exemplo, 0.1 + 0.2 pode não resultar em exatamente 0.3.\n\n\n\n2.3.4 Comparações Lógicas\nA Tabela 2.1 mostra operadores de comparação em Python, veja:\n\n\n\n\nTabela 2.1: Tabela de Operações e seus Significados\n\n\n\n\n\n\nOperação\nSignificado\n\n\n\n\n&lt;\nmenor que\n\n\n&gt;\nmaior que\n\n\n&lt;=\nmenor ou igual que\n\n\n&gt;=\nmaior ou igual que\n\n\n==\nigual\n\n\n!=\ndiferente\n\n\n\n\n\n\n\n\nVeja alguns exemplos:\n\n\nCódigo\n2 &lt; 10\n\n\nTrue\n\n\n\n\nCódigo\n2 &gt; 10\n\n\nFalse\n\n\n\n\nCódigo\nprint('Comparação Lógica - 10 menor que 10:', 10 &lt; 10)\n\n\nComparação Lógica - 10 menor que 10: False\n\n\nCódigo\nprint('Comparação Lógica - 10 maior que 10:', 10 &gt; 10)\n\n\nComparação Lógica - 10 maior que 10: False\n\n\nCódigo\nprint('Comparação Lógica - 10 menor ou igual a 10:', 10 &lt;= 10)\n\n\nComparação Lógica - 10 menor ou igual a 10: True\n\n\nCódigo\nprint('Comparação Lógica - 10 maior ou igual a 10:', 10 &gt;= 10)\n\n\nComparação Lógica - 10 maior ou igual a 10: True\n\n\nCódigo\nprint('Comparação Lógica - 10 igual a 10:', 10 == 10)\n\n\nComparação Lógica - 10 igual a 10: True\n\n\nCódigo\nprint('Comparação Lógica - 10 diferente de 10:', 10 != 10)\n\n\nComparação Lógica - 10 diferente de 10: False\n\n\nA Tabela 2.2 mostra conectores lógicos em Python, veja:\n\n\n\n\nTabela 2.2: Tabela de Operações e seus Significados\n\n\n\n\n\n\nOperação\nSignificado\n\n\n\n\nand\n1ª condição E 2ª condição\n\n\nor\n1ª condição OU 2ª condição\n\n\nnot\nNegação (Não)\n\n\nin\nEstá contido em\n\n\n\n\n\n\n\n\nVeja alguns exemplos:\n\n\nCódigo\nprint((1 and 4) &lt; 3)\n\n\nFalse\n\n\nCódigo\nprint((1 or 4) &lt; 3)\n\n\nTrue\n\n\nCódigo\nprint((1 and 2 and 2.99) &lt; 3)\n\n\nTrue\n\n\nCódigo\nprint((1 or 2 or 2.99) &gt; 3)\n\n\nFalse\n\n\n\n\nCódigo\nprint((5 &gt;= 4.99) and (10 &lt;= 10.01))\n\n\nTrue\n\n\nCódigo\nprint((5 &gt;= 4.99) and (10 == 10.01))\n\n\nFalse\n\n\n\n\nCódigo\nprint((5 &gt;= 4.99) or (10 &lt;= 10.01))\n\n\nTrue\n\n\nCódigo\nprint((5 &gt;= 4.99) or (10 == 10.01))\n\n\nTrue\n\n\n\n\nCódigo\nprint(1 == 1)\n\n\nTrue\n\n\nCódigo\nprint(not 1 == 1)\n\n\nFalse\n\n\nCódigo\nprint(not not 1 == 1)\n\n\nTrue\n\n\nCódigo\nprint(not not not 1 == 1)\n\n\nFalse\n\n\n\nNota: Assim como os operadores aritméticos, os operadores boleanos também possuem uma ordem de prioridade: not tem maior prioridade que and que tem maior prioridade que or:\n\n\n\nCódigo\nnot False and True or False\n\n\nTrue\n\n\n\n\n2.3.5 Variáveis e Atribuições\nVariável é nome que se refere a um valor. Atribuição é processo de criar uma nova variável e dar um novo valor a ela.\nExemplos:\n\n\nCódigo\nnumero = 2 * 3\nnumero\n\n\n6\n\n\n\n\nCódigo\nfrase = \"Me dá um copo d'água.\"\nfrase\n\n\n\"Me dá um copo d'água.\"\n\n\n\n\nCódigo\npi = 3.141592\nprint(pi)\n\n\n3.141592\n\n\nCódigo\npi = math.pi\nprint(pi)\n\n\n3.141592653589793\n\n\nNo exemplo anterior realizamos três atribuições. No primeiro atribuímos um número inteiro à variável de nome numero; no segundo uma frase à variável frase; no último um número de ponto flutuante à pi.\n\n2.3.5.1 Nome para Variáveis\nBons programadores escolhem nomes significativos para as suas variáveis - eles documentam o propósito da variável.\nNomes de variáveis podem ter o tamanho que você achar necessário e podem conter tanto letras como números, porém não podem começar com números. É possível usar letras maiúsculas, porém a convenção é utilizar somente letras minúsculas para nomes de variáveis.\n\n\nCódigo\ncrieiumavariavelcomnomegiganteeestoucompreguiçadeescrevertudodenovo = 10\ncrieiumavariavelcomnomegiganteeestoucompreguiçadeescrevertudodenovo\n\n\n10\n\n\nTentar dar um nome ilegal a uma variável ocasionará erro de sintaxe:\n[Input]  : 123voa = 10\n[Output] : SyntaxError: invalid decimal literal\n[Input]  : ol@ = \"oi\"\n[Output] : SyntaxError: invalid syntax\n[Input]  : def = 2.7\n[Output] : SyntaxError: invalid syntax\n123voa é ilegal pois começa com um número. ol@ é ilegal pois contém um caractere inválido (@), mas o que há de errado com def? A questão é que def é uma palavra-chave da linguagem. O Python possui diversas palavras-chave que são utilizadas na estrutura dos programas, por isso não podem ser utilizadas como nomes de variáveis.\nOutro ponto importante é que não é possível acessar variáveis que ainda não foram definidas.\n[Input]  : nao_definida\n[Output] : NameError: name 'nao_definida' is not defined\nTambém podemos atribuir expressões a uma variável:\n\n\nCódigo\nx = 3 * 5 - 2\nprint(x)\n\n\n13\n\n\nCódigo\ny = 3 * x + 10\nprint(y)\n\n\n49\n\n\nCódigo\nz = x + y\nprint(z)\n\n\n62\n\n\n\n\nCódigo\nn = 10\nn + 2 # 10 + 2\n\n\n12\n\n\n\n\nCódigo\n9 - n\n\n\n-1\n\n\nOutra forma de somar/multiplicar na variável:\n\n\nCódigo\nnum = 4\nnum += 3\nprint(num)\n\n\n7\n\n\nCódigo\nnum = 2\nnum *= 3\nprint(num)\n\n\n6\n\n\n\n\n2.3.5.2 Atribuição Múltipla\nUma funcionalidade interessante do Python é que ele permite atribuição múltipla. Isso é muito útil para trocar o valor de duas variáveis:\n\n\nCódigo\na = 1\nb = 200\n\n\nPara fazer essa troca em outras linguagens é necessário utilizar uma variável auxiliar para não perdemos um dos valores que queremos trocar. Vamos começar da maneira mais simples:\n\n\nCódigo\na = b # Perde-se o valor original de `a` (1)\na\n\n\n200\n\n\n\n\nCódigo\nb = a # Como perdeu-se `a`, `b` vai continuar com seu valor original (200)\nb\n\n\n200\n\n\nA troca é bem sucedida se usamos uma variável auxiliar:\n\n\nCódigo\na = 1\nb = 200\nprint(a, b)\n\n\n1 200\n\n\n\n\nCódigo\naux = a\na = b\nb = aux\nprint(a, b)\n\n\n200 1\n\n\nA atribuição múltipla também pode ser utilizada para simplificar a atribuição de variáveis, por exemplo:\n\n\nCódigo\na, b = 1, 200\nprint(a, b)\n\n\n1 200\n\n\n\n\nCódigo\na, b, c, d = 1, 2, 3, 4\nprint(a, b, c, d)\n\n\n1 2 3 4\n\n\n\n\nCódigo\na, b, c, d = d, c, b, a\nprint(a, b, c, d)\n\n\n4 3 2 1\n\n\n\n\n\n2.3.6 Tipos de Objetos\nCriamos muitas variáveis até agora. Você lembra o tipo de cada uma? Para saber o tipo de um objeto ou variável, usamos a função type():\n\n\nCódigo\nx = 1\nprint(type(x))\n\n\n&lt;class 'int'&gt;\n\n\nCódigo\ny = 2.3\nprint(type(y))\n\n\n&lt;class 'float'&gt;\n\n\nCódigo\npalavra = \"Python\"\nprint(type(palavra))\n\n\n&lt;class 'str'&gt;\n\n\nCódigo\nlogit = True\nprint(type(logit))\n\n\n&lt;class 'bool'&gt;\n\n\nPython vem com alguns tipos básicos de objetos, dentre eles:\n\nbool: Verdadeiro ou Falso (True or False);\nint: Números Inteiros;\nfloat: Números Reais;\ncomplex: Números Complexos;\nstr: Textos ou conjunto de caracteres (strings);\nlist: listas;\ndict: Dicionários.\n\nOs demais tipos de objetos serão vistos mais a frente com mais afinco.\n\n\n2.3.7 Buscando ajuda\nEstá com dúvida em alguma coisa? Use a função help() e depois digite o que você busca.\n\n\nCódigo\nhelp()\n\n\n\nWelcome to Python 3.8's help utility!\n\nIf this is your first time using Python, you should definitely check out\nthe tutorial on the Internet at https://docs.python.org/3.8/tutorial/.\n\nEnter the name of any module, keyword, or topic to get help on writing\nPython programs and using Python modules.  To quit this help utility and\nreturn to the interpreter, just type \"quit\".\n\nTo get a list of available modules, keywords, symbols, or topics, type\n\"modules\", \"keywords\", \"symbols\", or \"topics\".  Each module also comes\nwith a one-line summary of what it does; to list the modules whose name\nor summary contain a given string such as \"spam\", type \"modules spam\".\n\nhelp&gt; \nYou are now leaving help and returning to the Python interpreter.\nIf you want to ask for help on a particular object directly from the\ninterpreter, you can type \"help(object)\".  Executing \"help('string')\"\nhas the same effect as typing a particular string at the help&gt; prompt.\n\n\nE para buscar ajuda em uma coisa específica?\n\n\nCódigo\nhelp(print)\n\n\nHelp on built-in function print in module builtins:\n\nprint(...)\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n    \n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file:  a file-like object (stream); defaults to the current sys.stdout.\n    sep:   string inserted between values, default a space.\n    end:   string appended after the last value, default a newline.\n    flush: whether to forcibly flush the stream.\n\n\n\n\nCódigo\nhelp(math.sqrt)\n\n\nHelp on built-in function sqrt in module math:\n\nsqrt(x, /)\n    Return the square root of x.\n\n\n\n\n2.3.8 Autoconhecimento do código\nEm algum momento durante o seu código você pode querer saber quais variáveis já foram declaradas, ou até mesmo o valor atual delas. Podemos listar todas as variáveis declaradas no código usando o comando dir(). Veja um exemplo:\n\n\nCódigo\na = 1\nb = 2\ndir()\n\n\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'a', 'aux', 'b', 'c', 'crieiumavariavelcomnomegiganteeestoucompreguiçadeescrevertudodenovo', 'd', 'frase', 'logit', 'math', 'n', 'num', 'numero', 'palavra', 'pi', 'r', 'x', 'y', 'z']\n\n\nVeja que nossas variáveis declaradas aparecem proxímo do final do resultado de dir(). Não se assuste com os outros elementos que aparecem nesse resultado. Essas variáveis são criadas e usadas pelo próprio Python, e não são importantes nesse momento.\nOutra opção para visualizar as variáveis declaradas são os comandos globals() e locals(). Ambas mostram não só as variáveis declaradas, mas também seu valor atual. A diferença entre ambas está no escopo em que atuam, mas veja que seus resultados são semelhantes:\n\n\nCódigo\nglobals()\n\n\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, 'r': &lt;__main__.R object at 0x70f7b0d8dcd0&gt;, 'math': &lt;module 'math' from '/opt/python/3.8.17/lib/python3.8/lib-dynload/math.cpython-38-x86_64-linux-gnu.so'&gt;, 'numero': 6, 'frase': \"Me dá um copo d'água.\", 'pi': 3.141592653589793, 'crieiumavariavelcomnomegiganteeestoucompreguiçadeescrevertudodenovo': 10, 'x': 1, 'y': 2.3, 'z': 62, 'n': 10, 'num': 6, 'a': 1, 'b': 2, 'aux': 1, 'c': 2, 'd': 1, 'palavra': 'Python', 'logit': True}\n\n\n\n\nCódigo\nlocals()\n\n\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, 'r': &lt;__main__.R object at 0x70f7b0d8dcd0&gt;, 'math': &lt;module 'math' from '/opt/python/3.8.17/lib/python3.8/lib-dynload/math.cpython-38-x86_64-linux-gnu.so'&gt;, 'numero': 6, 'frase': \"Me dá um copo d'água.\", 'pi': 3.141592653589793, 'crieiumavariavelcomnomegiganteeestoucompreguiçadeescrevertudodenovo': 10, 'x': 1, 'y': 2.3, 'z': 62, 'n': 10, 'num': 6, 'a': 1, 'b': 2, 'aux': 1, 'c': 2, 'd': 1, 'palavra': 'Python', 'logit': True}\n\n\nCaso você esteja usando o IPython, os comandos mágicos %who e %whos são ótimas alternativas ao que já vimos anteriormente, pois retiram do resultado as variáveis declaradas pelo próprio Python, permitindo uma melhor visualização das que você mesmo declarou. Olhe como o IPython pode simplificar nossa vida nesse caso:\n[Input]  : %who\n[Input]  : %whos\n\n\n2.3.9 Strings\nTamém chamada de sequência de caracteres, textos ou dados alfanuméricos. Strings são tipos que armazenam uma sequência de caracteres:\n\n\nCódigo\n\"Texto com acentos de cedilhas: hoje é dia de caça!\"\n\n\n'Texto com acentos de cedilhas: hoje é dia de caça!'\n\n\n\n\nCódigo\n# As strings aceitam aspas simples também\nnome = 'Silvio Santos'\nnome\n\n\n'Silvio Santos'\n\n\nTambém é possível fazer algumas operações com strings:\n\n\nCódigo\nnome * 3\n\n\n'Silvio SantosSilvio SantosSilvio Santos'\n\n\n[Input]:  nome * 3.14\n[Output]: TypeError: can't multiply sequence by non-int of type 'float'\n\n\nCódigo\ncanto1 = 'vem aí, '\ncanto2 = 'lá '\nnome + ' ' + canto1 + canto2 * 6 + '!!'\n\n\n'Silvio Santos vem aí, lá lá lá lá lá lá !!'\n\n\n\n\nCódigo\n# Para strings em várias linhas, utilize 3 aspas\nstr_grande = ''' Aqui consigo inserir um textão com várias linhas, posso iniciar em uma ...\n... e posso continuar em outra ...\n... e em outra ...\n... e mais uma ...\n... e acabou.'''\n\n\n\n\nCódigo\nstr_grande\n\n\n' Aqui consigo inserir um textão com várias linhas, posso iniciar em uma ...\\n... e posso continuar em outra ...\\n... e em outra ...\\n... e mais uma ...\\n... e acabou.'\n\n\n\n\nCódigo\nprint(str_grande)\n\n\n Aqui consigo inserir um textão com várias linhas, posso iniciar em uma ...\n... e posso continuar em outra ...\n... e em outra ...\n... e mais uma ...\n... e acabou.\n\n\nCaso queira um texto que dentro tem aspas, como Me dá um copo d’água, é necessário utilizar aspas duplas para formar a string:\n\n\nCódigo\nagua = \"Me dá um copo d'água\"\nagua\n\n\n\"Me dá um copo d'água\"\n\n\nE também é possível utilizar aspas simples, duplas e triplas ao mesmo tempo! Olha só:\n\n\nCódigo\ntodas_as_aspas = \"\"\"Essa é uma string que tem:\n                    - aspas 'simples'\n                    - aspas \"duplas\"\n                    - aspas '''triplas'''\n                    Legal né?\"\"\"\n\n\n\n\nCódigo\ntodas_as_aspas\n\n\n'Essa é uma string que tem:\\n                    - aspas \\'simples\\'\\n                    - aspas \"duplas\"\\n                    - aspas \\'\\'\\'triplas\\'\\'\\'\\n                    Legal né?'\n\n\n\n\nCódigo\nprint(todas_as_aspas)\n\n\nEssa é uma string que tem:\n                    - aspas 'simples'\n                    - aspas \"duplas\"\n                    - aspas '''triplas'''\n                    Legal né?\n\n\n\n2.3.9.1 Tamanho\nA função embutida len() nos permite, entre outras coisas, saber o tamanho de uma string:\n\n\nCódigo\nlen('Abracadabra')\n\n\n11\n\n\n\n\nCódigo\npalavras = 'Faz um pull request lá'\nlen(palavras)\n\n\n22\n\n\nResaltando que a função len() conta o número de caracteres e não somente o número de letras, que contém uma string.\n\n\n2.3.9.2 Índices\nComo visto anteriormente, a função len() pode ser utilizado para obter o tamanho de estruturas, sejam elas strings, listas, etc. Esse tamanho representa a quantidade de elementos na estrutura.\nPara obter somente um caractere de dentro dessas estruturas, deve-se utilizar o acesso por índices, no qual o índice entre colchetes [] representa a posição do elemento que se deseja acessar.\n\nNota: Os índices começam em zero.\n\n\n\nP\ny\nt\nh\no\nn\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\n\n\nCódigo\npalavra = \"Python\"\n\n\n\n\nCódigo\npalavra[0] # primeiro caractere\n\n\n'P'\n\n\n\n\nCódigo\npalavra[5] # último caractere\n\n\n'n'\n\n\nÍndices negativos correspondem à percorrer a estrutura na ordem reversa:\n\n\nCódigo\npalavra[-1] # último caractere\n\n\n'n'\n\n\n\n\nCódigo\npalavra[-3] # terceira de trás para frente\n\n\n'h'\n\n\n\n\n2.3.9.3 Fatiamento\nSe, ao invés de obter apenas um elemento de uma estrutura, deseja-se obter múltiplos elementos, deve-se utilizar slicing (fatiamento). No lugar de colocar o índice do elemento entre chaves, deve-se colocar o índice do primeiro elemento, dois pontos (:) e o próximo índice do último elemento desejado, tudo entre colchetes. Por exemplo:\n\n\nCódigo\nfrase = \"Aprender Python é muito divertido!\"\n\n\n\n\nCódigo\nfrase[0:8] # Slicing do primeiro até o (8 - 1) caractere\n\n\n'Aprender'\n\n\n\n\nCódigo\nfrase[9:] # Omitir o segundo índice significa 'obter até o final'\n\n\n'Python é muito divertido!'\n\n\n\n\nCódigo\nfrase[:8] # Omitir o primeiro indice, significa 'obter desde o começo'\n\n\n'Aprender'\n\n\n\n\nCódigo\nfrase[:8] # Omitir o primeiro indice, significa 'obter desde o começo'\n\n\n'Aprender'\n\n\n\n\nCódigo\nfrase[:] # Toda string!\n\n\n'Aprender Python é muito divertido!'\n\n\nTambém funciona com índices negativos.\n\n\nCódigo\nfrase[::1] # Do começo ao fim, de 1 em 1 caractere. Logo, não faz nenhuma diferença\n\n\n'Aprender Python é muito divertido!'\n\n\n\n\nCódigo\nfrase[::2] # Do começo ao fim,de 2 em 2\n\n\n'Arne yhnémiodvrio'\n\n\n\n\nCódigo\nfrase[2:-2:2] # Do terceiro até o ante penúltimo, de 2 em 2\n\n\n'rne yhnémiodvri'\n\n\nÉ possível controlar o passo que a fatia usa. Para isso, coloca-se mais um dois pontos (:) depois do segundo índice e o tamanho do passo:\n\n\nCódigo\nfrase[:8] # Omitir o primeiro indice, significa 'obter desde o começo'\n\n\n'Aprender'\n\n\n\n\nCódigo\nfrase[:8] # Omitir o primeiro indice, significa 'obter desde o começo'\n\n\n'Aprender'\n\n\n\n\nCódigo\nfrase[:] # Toda string!\n\n\n'Aprender Python é muito divertido!'\n\n\nResumindo: para fazer uma fatia de nossa string, precisamos saber de onde começa, até onde vai e o tamanho do passo.\nfatiável[começo : fim : passo]\n\nNota: As fatias incluem o índice do primeiro elemento e não incluem o elemento do índice final. Por isso que frase[0:-1] perde o último elemento.\n\nCaso o fim da fatia seja antes do começo, obtemos um resultado vazio:\n[Input]  : frase[15:2]\n[Output] : ''\nE se quisermos uma fatia fora da string?\n[Input]  : frase[123:345]\n[Output] : ''\nMas e se o fim da fatia for maior que o tamanho da string? Não tem problemas, o Python vai até o onde der:\n[Input]  : frase[8:123456789]\n[Output] : ' Python é muito divertido!'\n[Input]  : frase[8:]\n[Output] : ' Python é muito divertido!'\nSurge problemas quando não existe o valor do índice passado dentro do colchetes.\n[Input]  : frase[123456789]\n[Output] : IndexError: string index out of range\nTamanhos negativos de passo também funcionam. Passos positivos significam para frente e passos negativos significam para trás:\n[Input]  : \"Python\"[::-1]\n[Output] : 'nohtyP'\nQuando usamos passos negativos, a fatia começa no fim e termina no começo e é percorrida ao contrário. Ou seja, invertemos a ordem. Mas tome cuidado:\n[Input]  : \"Python\"[2:6]\n[Output] : 'thon'\n[Input]  : \"Python\"[2:6:-1]\n[Output] : ''\n[Input]  : \"Python\"[6:2]\n[Output] : ''\n[Input]  : \"Python\"[6:2:-1]\n[Output] : 'noh'\nNo caso de \"Python\"[6:2], o começo é depois do fim. Por isso a string fica vazia.\nNo caso de \"Python\"[2:6:-1], o começo é o índice 6, o fim é o índice 2, percorrida ao contrário. Ou seja, temos uma string vazia ao contrário, que continua vazia.\nQuando fazemos \"Python\"[6:2:-1], o começo é o índice 2, o fim é o índice 6, percorrida ao contrário. Lembre que o índice final nunca é incluído. Ou seja, temos a string hon a ser invertida. O que resulta em noh.\n\n\n2.3.9.4 Separação de strings\nUsando a função split():\n\n\nCódigo\nfrase\n\n\n'Aprender Python é muito divertido!'\n\n\n\n\nCódigo\nfrase.split()\n\n\n['Aprender', 'Python', 'é', 'muito', 'divertido!']\n\n\n\n\nCódigo\ntodas_as_aspas.split('\\n')\n\n\n['Essa é uma string que tem:', \"                    - aspas 'simples'\", '                    - aspas \"duplas\"', \"                    - aspas '''triplas'''\", '                    Legal né?']\n\n\n\n\n\n2.3.10 Entrada de dados\nEm Python também é possível ler do teclado as informações digitadas pelo usuário. E isso é feito por meio da função embutida input() da seguinte forma:\n[Input]  : valor_lido = input(\"Digite um valor: \")\n           Digite um valor: 10\n[Input]  : type(valor_lido) # deve-se notar que o valor lido é SEMPRE do tipo string\n[Output] : str\n\nNota: A função input() «termina» de ser executada quando pressionamos enter. O valor lido é sempre do tipo string.\n\nMas, como realizar operações com os valores lidos?\n[Input]  : valor_lido = int(input(\"Digite um valor: \"))\n           print(f\"O quadrado do número fornecido na entreda é: {valor_lido ** 2}\")\n           \n[Output] : Digite um valor: 10\n           O quadrado do número fornecido na entrada é 100\nTudo o que for digitado no teclado, até pressionar a tecla enter, será capturado pela função input(). Isso significa que podemos ler palavras separadas por um espaço, ou seja, uma frase inteira:\n[Input]  : frase = input()\n\n[Output] : Amanhã nos veremos!\n\n2.3.10.1 Formatação\n[Input]  : nome = input(\"Digite seu nome: \")\n\n[Output] : Digite seu nome: Breno Cauã\n[Input]  : frase = \"Olá, {}\".format(nome)\n           frase\n\n[Output] : Olá, Breno Cauã\nVale lembrar que as chaves {} só são trocadas pelo valor após a chamada do método str.format():\n[Input]  : string_a_ser_formatada = '{} me formate!'\n          string_a_ser_formatada\n\n[Output] : '{} me formate!'\n[Input]  : string_a_ser_formatada.format(\"Não\")\n\n[Output] : 'Não me formate!'\nA string a ser formatada não é alterada nesse processo, já que não foi feita nenhuma atribuição:\n[Input]  : string_a_ser_formatada\n\n[Output] : '{} me formate!'\n\n2.3.10.1.1 Alternativa ao format()\nUma maneira mais recente de formatar strings foi introduzida a partir da versão 3.6 do Python: PEP 498 – Literal String Interpolation, carinhosamente conhecida como fstrings e funciona da seguinte forma:\n\n\nCódigo\nnome = \"Breno\"\nf\"Olá, {nome}.\"\n\n\n'Olá, Breno.'\n\n\n\n\nCódigo\nnum = 12\nprint(\n    f\"\"\"\n    Número de meses em um ano: {num}.\n    Número de meses em um semestre: {num // 2}.\n    Número de meses em um trimestre: {num // 4}.\n    Número de meses em um quadrimestre: {num // 3}.\n    Número de meses em um bimestre: {num // 6}\n    \"\"\"\n)\n\n\n\n    Número de meses em um ano: 12.\n    Número de meses em um semestre: 6.\n    Número de meses em um trimestre: 3.\n    Número de meses em um quadrimestre: 4.\n    Número de meses em um bimestre: 2\n    \n\n\n\n\n\n\n2.3.11 Listas\nListas são estruturas de dados capazes de armazenar múltiplos elementos.\n\n2.3.11.1 Declaração\nPara a criação de uma lista, basta colocar os elementos separados por vírgulas dentro de colchetes [], como no exemplo abaixo:\n\n\nCódigo\nnomes_frutas = [\"maça\", \"banana\", \"abacaxi\"]\nnomes_frutas\n\n\n['maça', 'banana', 'abacaxi']\n\n\n\n\nCódigo\nnumeros = [2, 13, 17, 47]\nnumeros\n\n\n[2, 13, 17, 47]\n\n\nUma lista também pode ser contida por diferentes tipos de elementos, por exemplo:\n\n\nCódigo\n['lorem ipsum', 150, 1.3, [-1, -2]]\n\n\n['lorem ipsum', 150, 1.3, [-1, -2]]\n\n\nUma lista também pode ser vazia, algo que futaremente veremos que pode ser muito útil, por exemplo:\n\n\nCódigo\nvazia = []\nvazia\n\n\n[]\n\n\n\n\n2.3.11.2 Índices\nAssim como nas strings, é possível acessar separadamente cada item de uma lista a partir de seu índice:\n\n\nCódigo\nlista = [100, 200, 300, 400, 500]\nlista[0] # Primeiro elemento\n\n\n100\n\n\n\n\nCódigo\nlista[2] # Terceiro elemento\n\n\n300\n\n\n\n\nCódigo\nlista[4] # Último elemento\n\n\n500\n\n\n\n\nCódigo\nlista[-1] # Outra maneira de acessar o último elemento\n\n\n500\n\n\nTentar acessar uma posição inválida de uma lista causa um erro:\n[Input]  : lista[10]\n\n[Output] : IndexError: list index out of range\n\n\n2.3.11.3 Slincing (Fatiamento)\nSemelhante ao processo de fatiamento de strings.\n\n\nCódigo\nlista[0:1] # Do começo até o primeiro elemento\n\n\n[100]\n\n\n\n\nCódigo\nlista[0:2] # Do começo até o segundo elemento (que está na posição de índice 1)\n\n\n[100, 200]\n\n\n\n\nCódigo\nlista[::2] # Do começo ao fim, de 2 em 2 elementos\n\n\n[100, 300, 500]\n\n\n\n\nCódigo\nlista[::-2] # Do fim ao começo, de 2 em 2 elementos\n\n\n[500, 300, 100]\n\n\n\n\n2.3.11.4 Verificações\nVerificar se um elemento está contido em uma lista. Utilizando o conector lógico in.\n\n\nCódigo\nlista_estranha = ['duas palavras', 42, True, ['batman', 'robin'], -0.84, 'hipófise']\n42 in lista_estranha\n\n\nTrue\n\n\n\n\nCódigo\n'duas palavras' in lista_estranha\n\n\nTrue\n\n\n\n\nCódigo\n'batman' in lista_estranha\n\n\nFalse\n\n\n\n\nCódigo\n'batman' in lista_estranha[3] # Note que o elemento com índice 3 também é uma lista\n\n\nTrue\n\n\nVerificando o tamnaho de uma lista. É possível obter o tamanho da lista utilizando função len():\n\n\nCódigo\nlen(lista)\n\n\n5\n\n\n\n\nCódigo\nlen(lista_estranha)\n\n\n6\n\n\n\n\nCódigo\nlen(lista_estranha[3])\n\n\n2\n\n\n\n\n2.3.11.5 Removendo itens da lista\nDevido à lista ser uma estrutura mutável, é possível remover seus elementos utilizando o comando del:\n\n\nCódigo\nlista_estranha\n\n\n['duas palavras', 42, True, ['batman', 'robin'], -0.84, 'hipófise']\n\n\n\n\nCódigo\ndel lista_estranha[2]\nlista_estranha\n\n\n['duas palavras', 42, ['batman', 'robin'], -0.84, 'hipófise']\n\n\n\n\nCódigo\ndel lista_estranha[-1] # Remove o último elemento da lista\nlista_estranha\n\n\n['duas palavras', 42, ['batman', 'robin'], -0.84]\n\n\n\n\n2.3.11.6 Trabalhando com listas\nO operador \\(+\\) concatena listas:\n\n\nCódigo\na = [1, 2, 3]\nb = [4, 5, 6]\nc = a + b\nc\n\n\n[1, 2, 3, 4, 5, 6]\n\n\nO operador \\(*\\) repete a lista dado um número de vezes:\n\n\nCódigo\n[0] * 3\n\n\n[0, 0, 0]\n\n\n\n\nCódigo\n[1, 2, 3] * 2\n\n\n[1, 2, 3, 1, 2, 3]\n\n\n\n\nCódigo\n[1, 2, 3] * 2\n\n\n[1, 2, 3, 1, 2, 3]\n\n\nO método append() adiciona um elemento ao final da lista:\n\n\nCódigo\nlista = ['a', 'b', 'c']\nlista\n\n\n['a', 'b', 'c']\n\n\n\n\nCódigo\nlista.append('e')\nlista\n\n\n['a', 'b', 'c', 'e']\n\n\nTemos também o insert(), que insere um elemento na posição especificada e move os demais elementos para direita:\n\n\nCódigo\nlista.insert(3, 'd') # Insere 'd' na posição 3\nlista\n\n\n['a', 'b', 'c', 'd', 'e']\n\n\n\nAviso: Cuidado com lista.insert(-1, algo)! Nesse caso, inserimos algo na posição -1 e o elemento que estava previamente na posição -1 é movido para a direita:\n\n\n\nCódigo\nlista.insert(-1, 'ç')\nlista\n\n\n['a', 'b', 'c', 'd', 'ç', 'e']\n\n\n\nUse append() caso queira algo adicionado ao final da lista.\n\nextend() recebe uma lista como argumento e adiciona todos seus elementos a outra:\n\n\nCódigo\nlista1 = ['a', 'b', 'c']\nlista2 = ['d', 'e']\n\n\n\n\nCódigo\nlista1.extend(lista2)\nlista1\n\n\n['a', 'b', 'c', 'd', 'e']\n\n\n\n\nCódigo\nlista2 # `lista2` não é modificado\n\n\n['d', 'e']\n\n\nO método sort() ordena os elementos da lista em ordem ascendente:\n\n\nCódigo\nlista_desordenada = ['b', 'z', 'k', 'a', 'h']\nlista_desordenada\n\n\n['b', 'z', 'k', 'a', 'h']\n\n\n\n\nCódigo\nlista_desordenada.sort()\nlista_desordenada # Agora está ordenada!\n\n\n['a', 'b', 'h', 'k', 'z']\n\n\n\n\nCódigo\nlista2_desordenada = [5, 6.4, 1.2, 34, 2.1]\nlista2_desordenada\n\n\n[5, 6.4, 1.2, 34, 2.1]\n\n\n\n\nCódigo\nlista2_desordenada.sort()\nlista2_desordenada # Agora está ordenada!\n\n\n[1.2, 2.1, 5, 6.4, 34]\n\n\nPara fazer uma cópia de uma lista, devemos usar o método copy():\n\n\nCódigo\nlista1 = ['a', 'b', 'c']\nlista2 = lista1.copy()\n\n\n\n\nCódigo\nprint(lista1)\n\n\n['a', 'b', 'c']\n\n\nCódigo\nprint(lista2)\n\n\n['a', 'b', 'c']\n\n\n\n\nCódigo\nlista2.append('d')\nlista2\n\n\n['a', 'b', 'c', 'd']\n\n\n\n\nCódigo\nlista1\n\n\n['a', 'b', 'c']\n\n\nSe não usarmos o copy(), acontece algo bem estranho:\n\n\nCódigo\nlista1 = ['a', 'b', 'c']\nlista2 = lista1\n\n\n\n\nCódigo\nprint(lista1)\n\n\n['a', 'b', 'c']\n\n\nCódigo\nprint(lista2)\n\n\n['a', 'b', 'c']\n\n\n\n\nCódigo\nlista2.append('d')\nlista2\n\n\n['a', 'b', 'c', 'd']\n\n\n\n\nCódigo\nlista1\n\n\n['a', 'b', 'c', 'd']\n\n\nPara alterar um valor em específico de uma lista basta sabermos em que índice tal valor está.\n\n\nCódigo\n# Criando uma lista que contém as cinco primeiras letras do alfabelto\nalfabeto = ['A', 'B', 'C', 'Z', 'E']\n\n# Visualizando antes da mudança\nprint(f\"Lista Atual: {alfabeto}\")\n\n\nLista Atual: ['A', 'B', 'C', 'Z', 'E']\n\n\nCódigo\n# Verificando em qual posição está o elemneto que deve ser alterado\nid = alfabeto.index('Z')\n\n# Fazendo a alteração na lista original\nalfabeto[id] = 'D'\n\n# Visualizando lista alterada\nprint(f\"Lista Alterada: {alfabeto}\")\n\n\nLista Alterada: ['A', 'B', 'C', 'D', 'E']\n\n\n\n\n\n2.3.12 Função range()\nAssim com as funções print() e len(), a função range() é do Python básico.\nAprendemos a adicionar itens a uma lista mas, e se fosse necessário produzir uma lista com os números de 1 até 200?\n[Input]: lista_grande = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ..., 200]\nEm Python existe a função embutida range(), com ela é possível produzir uma lista extensa de uma maneira bem simples:\n\n\nCódigo\nlist(range(1, 200))\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n\n\n\n\nCódigo\nlist(range(1, 200))\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n\n\nAlém disso, o range() também oferece algumas coisas interessantes. Por exemplo, imprimir os números espaçados de 5 em 5, entre 0 e 30:\n\n\nCódigo\nlist(range(0, 30, 5))\n\n\n[0, 5, 10, 15, 20, 25]\n\n\nRepare que os argumentos passados são da forma: range(start, stop, step).\nOnde start: É o início. stop: É o fim (\\(n - 1\\)). step: É o espaço entre o valores contidos entre \\([start;stop)\\)\nMas por que precisamos transformar o range() em list? O que acontece se não fizermos isso?\n\n\nCódigo\nprint(range(200))\n\n\nrange(0, 200)\n\n\nCódigo\nprint(type(range(200)))\n\n\n&lt;class 'range'&gt;\n\n\nA função range() retorna algo do tipo range, por isso precisamos transformar em uma lista para vermos (imprimir) todos os números no print()!\n\n\nCódigo\nrange_lista = list(range(200))\nrange_lista\n\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n\n\n\n\n2.3.13 Dicionários\nDicionário é uma coleção de itens (chamados chaves) e seus respectivos significados (chamados de valores): {chave: valor}.\nCada chave do dicionário deve ser única! Ao contrário de listas, dicionários, não podem ter chaves repetidas.\n\nNota: As chaves devem ser únicas.\n\n\n2.3.13.1 Declaração\nDeclaramos um dicionário colocando entre chaves {} cada chave e o seu respectivo valor, da seguinte forma:\n\n\nCódigo\ntelefones = {\"ana\": 123456, \"yudi\": 40028922, \"julia\": 4124492}\ntelefones\n\n\n{'ana': 123456, 'yudi': 40028922, 'julia': 4124492}\n\n\nNo caso acima, a chave \"ana\", por exemplo, está relacionada ao valor 123456. Cada par chave-valor é separado por uma vírgula.\n\n\n2.3.13.2 Função dict()\nA função dict() constrói um dicionário. Existem algumas formas de usá-la:\n\nCom uma lista de listas:\n\n\n\nCódigo\n# Definindo três listas diferentes\nlista1 = [\"brigadeiro\", \"leite condesado, achocolatado\"]\nlista2 = [\"omelete\", \"ovos, azeite, condimentos a gosto\"]\nlista3 = [\"ovo frito\", \"ovo, óleo, condimentos a gosto\"]\n\n# Criando uma lista de listas\nlista_receitas = [lista1, lista2, lista3]\n\n# Visualizando resultado\nlista_receitas\n\n\n[['brigadeiro', 'leite condesado, achocolatado'], ['omelete', 'ovos, azeite, condimentos a gosto'], ['ovo frito', 'ovo, óleo, condimentos a gosto']]\n\n\n\n\nCódigo\n# Transformando lista de listas em um dicionário\nreceitas = dict(lista_receitas)\n\n# Visualizando o resultado\nreceitas\n\n\n{'brigadeiro': 'leite condesado, achocolatado', 'omelete': 'ovos, azeite, condimentos a gosto', 'ovo frito': 'ovo, óleo, condimentos a gosto'}\n\n\n\nAtribuindo os valores diretamente:\n\n\n\nCódigo\nconstantes = dict(pi=3.14, e=2.7, alpha=1/137)\nconstantes\n\n\n{'pi': 3.14, 'e': 2.7, 'alpha': 0.0072992700729927005}\n\n\n\n\n2.3.13.3 Chaves\nAcessamos um determinado valor do dicionário através de sua chave:\n\n\nCódigo\n# Definindo um dicionário para capitais de estados brasileiros\ncapitais = {\"SP\": \"São Paulo\", \"AC\": \"Rio Branco\", \"TO\": \"Palmas\",\n            \"RJ\": \"Rio de Janeiro\", \"SE\": \"Aracaju\", \"MG\": \"Belo Horizonte\"}\n\n# Acessando o valor correspondente a chave \"MG\"\ncapitais[\"MG\"]\n\n\n'Belo Horizonte'\n\n\nAté o momento, usamos apenas strings, mas podemos colocar todo tipo de coisa dentro dos dicionários, incluindo listas e até mesmo outros dicionários:\n\n\nCódigo\n# Dicionários para tipos de número\nnumeros = {\"primos\": [2, 3, 5], \"pares\": [0, 2, 4], \"ímpares\": [1, 3, 5]}\n\n# Acessando o valor correspondente a chave \"ímpares\"\nnumeros[\"ímpares\"]\n\n\n[1, 3, 5]\n\n\nMesmo que os pares chave-valor estejam organizados na ordem que foram colocados, não podemos acessá-los por índices como faríamos em listas:\n[Input]  : numeros[2]\n[Output] : KeyError: 2\nO mesmo erro ocorre se tentarmos colocar uma chave que não pertence ao dicionário:\n[Input]  : numeros[\"negativos\"]\n[Output] : KeyError: 'negativos'\nAssim como os valores não precisam ser do tipo string, o mesmo vale para as chaves:\n\n\nCódigo\nnumeros_por_extenso = {2: \"dois\", 1: \"um\", 3: \"três\", 0: \"zero\"}\nnumeros_por_extenso[0]\n\n\n'zero'\n\n\n\n\nCódigo\nnumeros_por_extenso[2]\n\n\n'dois'\n\n\n\nNota: Listas e outros dicionários não podem ser usados como chaves por serem de tipos mutáveis.\n\n\n\n2.3.13.4 Adicionando e removendo elementos\nPodemos alterar o valor relacionado a uma chave da seguinte forma:\n\n\nCódigo\n# Informações de Cleiton\npessoa = {\"nome\": \"Cleiton\", \"idade\": 34, \"família\": {\"mãe\": \"Maria\", \"pai\": \"Enzo\"}}\n\n# Visualizando\npessoa\n\n\n{'nome': 'Cleiton', 'idade': 34, 'família': {'mãe': 'Maria', 'pai': 'Enzo'}}\n\n\n\n\nCódigo\npessoa[\"idade\"] # Acessando a informação \"idade\" de Cleiton\n\n\n34\n\n\n\n\nCódigo\n# Alterando a informação da \"idade\" de Cleiton\npessoa[\"idade\"] = 35\n\n# Acessando a informação nova da \"idade\" de Cleiton\npessoa[\"idade\"]\n\n\n35\n\n\nPara adicionar um elemento novo à um dicionário, podemos simplesmente fazer o seguinte:\n\n\nCódigo\n# Dicionário de meses do ano\nmeses = {1: \"Janeiro\", 2: \"Fevereiro\", 3: \"Março\"}\n\n# Adicionando o mês de \"Abril\" na chave 4\nmeses[4] = \"Abril\"\n\n# Visualizando\nmeses\n\n\n{1: 'Janeiro', 2: 'Fevereiro', 3: 'Março', 4: 'Abril'}\n\n\nAqui nos referimos a uma chave que não está no dicionário e associamos um valor a ela. Desta forma, adicionando esse conjunto chave-valor ao dicionário. Removemos um conjunto chave-elemento de um dicionário com o comando del():\n\n\nCódigo\n# Excluíndo o mês de \"Abril\"\ndel(meses[4])\n\n# Visualizando\nmeses\n\n\n{1: 'Janeiro', 2: 'Fevereiro', 3: 'Março'}\n\n\nPara alterar um valor em específico de uma lista que está dentro de um dicionário, podemos usar o seguinte código.\n\n\nCódigo\n# Novo dicionário\nlixo = {\"plástico\": [\"garrafa\", \"copinho\", \"canudo\"], \"papel\": [\"folha amassada\", \"guardanapo\"], \"orgânico\": [\"batata\", \"resto do bandeco\", \"casca de banana\"]}\n\n# Visualizando\nlixo\n\n\n{'plástico': ['garrafa', 'copinho', 'canudo'], 'papel': ['folha amassada', 'guardanapo'], 'orgânico': ['batata', 'resto do bandeco', 'casca de banana']}\n\n\n\n\nCódigo\n# Obtendo lista de interesse para alteração\nlista_de_interesse = lixo['plástico']\n\n# Verificando em qual posição está o elemneto que deve ser alterado\nid = lista_de_interesse.index('garrafa')\n\n# Fazendo a alteração diretamente no dicionário\nlixo['plástico'][id] = 'sacola'\n\n# Visualizando dicionário alterado\nlixo\n\n\n{'plástico': ['sacola', 'copinho', 'canudo'], 'papel': ['folha amassada', 'guardanapo'], 'orgânico': ['batata', 'resto do bandeco', 'casca de banana']}\n\n\nPara apagar todos os elementos de um dicionário, usamos o método clear:\n\n\nCódigo\n# Apagando todos os elementos do dicionário\nlixo.clear()\n\n# Visualizando\nlixo\n\n\n{}\n\n\n\n\n2.3.13.5 Função list()\nA função list() recebe um conjunto de objetos e retorna uma lista. Ao passar um dicionário, ela retorna uma lista contendo todas as suas chaves:\n\n\nCódigo\ninstitutos_uspsc = {\"IFSC\": \"Instituto de Física de São Carlos\", \"ICMC\": \"Instituto de Ciências Matemáticas e de Computação\",\n                    \"EESC\": \"Escola de Engenharia de São Carlos\", \"IAU\": \"Instituto de Arquitetura e Urbanismo\", \"IQSC\": \"Instituto de Química de São Carlos\"}\ninstitutos_uspsc\n\n\n{'IFSC': 'Instituto de Física de São Carlos', 'ICMC': 'Instituto de Ciências Matemáticas e de Computação', 'EESC': 'Escola de Engenharia de São Carlos', 'IAU': 'Instituto de Arquitetura e Urbanismo', 'IQSC': 'Instituto de Química de São Carlos'}\n\n\n\n\nCódigo\nlist(institutos_uspsc)\n\n\n['IFSC', 'ICMC', 'EESC', 'IAU', 'IQSC']\n\n\n\n\n2.3.13.6 Função len()\nA função len() retorna o número de elementos (tamanho) do objeto passado para ela. No caso de uma lista, fala quantos elementos há. No caso de dicionários, retorna o número de chaves contidas nele:\n\n\nCódigo\ninstitutos_uspsc\n\n\n{'IFSC': 'Instituto de Física de São Carlos', 'ICMC': 'Instituto de Ciências Matemáticas e de Computação', 'EESC': 'Escola de Engenharia de São Carlos', 'IAU': 'Instituto de Arquitetura e Urbanismo', 'IQSC': 'Instituto de Química de São Carlos'}\n\n\n\n\nCódigo\nlen(institutos_uspsc)\n\n\n5\n\n\nVocê pode contar o número de elementos na lista gerada pela função list() para conferir:\n\n\nCódigo\nlen(list(institutos_uspsc))\n\n\n5\n\n\n\n\n2.3.13.7 Método get()\nO método get(chave, valor) pode ser usado para retornar o valor associado à respectiva chave! O segundo parâmetro &lt;valor&gt; é opcional e indica o que será retornado caso a chave desejada não esteja no dicionário:\n\n\nCódigo\ninstitutos_uspsc.get(\"IFSC\")\n\n\n'Instituto de Física de São Carlos'\n\n\nDá para ver que ele é muito parecido com fazer assim:\n\n\nCódigo\ninstitutos_uspsc[\"IFSC\"]\n\n\n'Instituto de Física de São Carlos'\n\n\nMas ao colocarmos uma chave que não está no dicionário:\n\n\nCódigo\ninstitutos_uspsc.get(\"Poli\")\n\n\n\n\nCódigo\ninstitutos_uspsc.get(\"Poli\", \"Não tem!\")\n\n\n'Não tem!'\n\n\n[Input]  : institutos_uspsc[\"Poli\"]\n[Output] : KeyError: 'Poli'\n\n\n2.3.13.8 Alguns, outros, métodos\nVamos criar um dicionário para exemplo.\n\n\nCódigo\npessoa = {\"nome\": \"Enzo\", \"RA\": 242334, \"curso\": \"fiscomp\"}\npessoa.items()\n\n\ndict_items([('nome', 'Enzo'), ('RA', 242334), ('curso', 'fiscomp')])\n\n\nUsando a função list() nesse resultado, obtemos:\n\n\nCódigo\nitens = list(pessoa.items())\nitens\n\n\n[('nome', 'Enzo'), ('RA', 242334), ('curso', 'fiscomp')]\n\n\nExperimente usar a função dict() na lista itens!\n\n\nCódigo\ndict(itens)\n\n\n{'nome': 'Enzo', 'RA': 242334, 'curso': 'fiscomp'}\n\n\nO método values() nos retorna os valores do dicionário:\n\n\nCódigo\npessoa.values()\n\n\ndict_values(['Enzo', 242334, 'fiscomp'])\n\n\n\n\nCódigo\nvalores = list(pessoa.values())\nvalores\n\n\n['Enzo', 242334, 'fiscomp']\n\n\nO método keys() nos retorna as chaves do dicionário:\n\n\nCódigo\npessoa.keys()\n\n\ndict_keys(['nome', 'RA', 'curso'])\n\n\nRepare que nesse último obtemos o mesmo que se tivéssemos usado a função list() diretamente no objeto dicionário:\n\n\nCódigo\nlist(pessoa)\n\n\n['nome', 'RA', 'curso']\n\n\n\n\n2.3.13.9 Ordem dos elementos\nDicionários não tem sequência dos seus elementos. As listas têm. Dicionários mapeiam um valor a uma chave. Veja este exemplo:\n\n\nCódigo\nnumerinhos = {\"um\": 1, \"dois\": 2, \"três\": 3}\nnumeritos = {\"três\": 3, \"dois\": 2, \"um\": 1}\nnumerinhos == numeritos\n\n\nTrue\n\n\n\n\nCódigo\nnumeritos\n\n\n{'três': 3, 'dois': 2, 'um': 1}\n\n\n\n\nCódigo\nnumerinhos\n\n\n{'um': 1, 'dois': 2, 'três': 3}\n\n\nVemos que numerinhos e numeritos têm as mesmas chaves com os mesmos valores e por isso são iguais. Mas quando imprimimos cada um, a ordem que aparece é a que os itens foram inseridos.\n\n\n2.3.13.10 Está no dicionário?\nPodemos checar se uma chave está ou não em um dicionário utilizando o comando in. Voltando para o dicionário que contem os institutos da USP São Carlos:\n\n\nCódigo\ninstitutos_uspsc\n\n\n{'IFSC': 'Instituto de Física de São Carlos', 'ICMC': 'Instituto de Ciências Matemáticas e de Computação', 'EESC': 'Escola de Engenharia de São Carlos', 'IAU': 'Instituto de Arquitetura e Urbanismo', 'IQSC': 'Instituto de Química de São Carlos'}\n\n\n\n\nCódigo\n\"IFSC\" in institutos_uspsc\n\n\nTrue\n\n\n\n\nCódigo\n\"ESALQ\" in institutos_uspsc\n\n\nFalse\n\n\nE checamos se uma chave não está no dicionário com o comando not in:\n\n\nCódigo\n\"IFSC\" not in institutos_uspsc\n\n\nFalse\n\n\n\n\nCódigo\n\"ESALQ\" not in institutos_uspsc\n\n\nTrue",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#controle-de-fluxo",
    "href": "basic.html#controle-de-fluxo",
    "title": "2  1º Módulo: Python Básico",
    "section": "2.4 Controle de Fluxo",
    "text": "2.4 Controle de Fluxo\n\n2.4.1 Estruturas de Decisão\nAs estruturas de controle servem para decidir quais blocos de código serão executados.\nExemplo:\nSe estiver nublado:\n    Levarei guarda-chuva\nSenão:\n    Não levarei\n\nNota: Na linguagem Python, a indentação (espaço dado antes de uma linha) é utilizada para demarcar os blocos de código, e são obrigatórios quando se usa estruturas de controle.\n\n\n\nCódigo\n# Definindo uma variável qualquer\na = 7\n\nif a &gt; 3: # Se a for maior que 3\n  print(\"estou no if\")\nelse: # Senão\n  print(\"cai no else\")\n\n\nestou no if\n\n\nTambém é possível checar mais de uma condição com o elif. É a abreviatura para else-if. Ou seja, se o if for falso, testa outra condição antes do else:\n\n\nCódigo\nvalor_entrada = 10\n\nif valor_entrada == 1:\n  print(\"a entrada era 1\")\nelif valor_entrada == 2:\n  print(\"a entrada era 2\")\nelif valor_entrada == 3:\n  print(\"a entrada era 3\")\nelif valor_entrada == 4:\n  print(\"a entrada era 4\")\nelse:\n  print(\"o valor de entrada não era esperado em nenhum if\")\n\n\no valor de entrada não era esperado em nenhum if\n\n\nNote que quando uma condição for verdadeira, aquele bloco de código é executado e as demais condições (elif e else) são puladas:\n\n\nCódigo\na = 1\n\nif a == 1:\n  print(\"é 1\")\nelif a &gt;= 1:\n  print(\"é maior ou igual a 1\")\nelse:\n  print(\"é qualquer outra coisa\")\n\n\né 1\n\n\nDesta forma, se não optarmos usar o elif, mas sim if seguido de if, veja o que pode acontecer:\n\n\nCódigo\na = 1\n\nif a == 1:\n  print(\"Caiu no 1º `if`\")\n\n\nCaiu no 1º `if`\n\n\nCódigo\nif a &gt;= 1:\n  print(\"Caiu no 2º `if`\")\n\nelse:\n  print(\"Caiu no `else`\")\n\n\nCaiu no 2º `if`\n\n\n\n\n2.4.2 Estruturas de Repetição\nAs estruturas de repetição são utilizadas quando queremos que um bloco de código seja executado várias vezes.\nEm Python existem duas formas de criar uma estrutura de repetição: * O for é usado quando se quer iterar sobre um bloco de código um determinado número de vezes. * O while é usando quando queremos que o bloco de código seja repetido até que uma condição seja satisfeita.\nOu seja, é necessário que uma expressão boleana dada seja verdadeira. Assim que ela se tornar falsa, o while para.\n\nNota: Na linguagem Python a indentação é obrigatória. assim como nas estruturas de decisão, as estruturas de repetição também precisam.\n\n\n\nCódigo\n# Interação usando `for`\nfor n in range(0, 3): # `para n em [0;3) faça`\n  print(n)\n\n\n0\n1\n2\n\n\n\n\nCódigo\n# Iniciando em n em zero\nn = 0\n\nwhile n &lt; 3: # `enquanto n menor que três faça`\n  print(n)\n  n += 1\n\n\n0\n1\n2\n\n\nO loop for em Python itera sobre os itens de um conjunto, sendo assim, o range(0, 3) precisa ser um conjunto de elementos. E na verdade ele é:\n\n\nCódigo\nlist(range(0, 3))\n\n\n[0, 1, 2]\n\n\nPara iterar sobre uma lista usando for:\n\n\nCódigo\nlista = [1, 2, 3, 4, 10]\nfor numero in lista:\n  print(numero ** 2)\n\n\n1\n4\n9\n16\n100\n\n\nEm dicionários podemos fazer assim:\n\n\nCódigo\n# Define um dicionário chamado 'gatinhos' que armazena a tradução da palavra \"gato\" em diferentes idiomas.\n# As chaves do dicionário são os idiomas e os valores são as traduções correspondentes.\ngatinhos = {\"Português\": \"gato\", \"Inglês\": \"cat\", \"Francês\": \"chat\", \"Finlandês\": \"Kissa\"}\n\n# Itera pelos pares chave-valor do dicionário 'gatinhos' usando o método .items().\n# Para cada par chave-valor, a chave é atribuída à variável 'chave' e o valor à variável 'valor'.\nfor chave, valor in gatinhos.items():\n  # Imprime a chave (idioma) e o valor (tradução) separados por \"-&gt;\".\n  print(chave, \"-&gt;\", valor)\n\n\nPortuguês -&gt; gato\nInglês -&gt; cat\nFrancês -&gt; chat\nFinlandês -&gt; Kissa\n\n\nPara auxiliar as estruturas de repetição, existem dois comandos:\n\nbreak: É usado para sair de um loop, não importando o estado em que se encontra.\ncontinue: Funciona de maneira parecida com a do break, porém no lugar de encerrar o loop, ele faz com que todo o código que esteja abaixo (porém ainda dentro do loop) seja ignorado e avança para a próxima iteração.\n\nVeja a seguir um exemplo de um código que ilustra o uso desses comandos. Note que há uma string de documentação no começo que explica a funcionalidade. O primeiro bloco de código, mostrando a seguir, é o bloco de entrada (que deve ser compilado).\n\"\"\"\nEsse código deve rodar até que a palavra \"sair\" seja digitada.\n- Caso uma palavra com 2 ou menos caracteres seja digitada, um aviso\ndeve ser exibido e o loop será executado do início (devido ao continue), \npedindo uma nova palavra ao usuário.\n- Caso qualquer outra palavra diferente de \"sair\" seja digitada, um aviso\ndeve ser exibido.\n- Por fim, caso a palavra seja \"sair\", uma mensagem deve ser exibida e o \nloop deve ser encerrado (break).\n\"\"\"\n\n# Este é um loop infinito que continuará até que o usuário digite \"sair\". \nwhile True:\n    # Solicita ao usuário que digite uma palavra.\n    string_digitada = input(\"Digite uma palavra: \")\n    # Verifica se a string digitada é igual a \"sair\", ignorando maiúsculas e minúsculas.\n    if string_digitada.lower() == \"sair\":\n        # Se for \"sair\", imprime \"Fim!\" e encerra o loop.\n        print(\"Fim!\")\n        break\n    \n    # Verifica se o comprimento da string digitada é menor ou igual a 2.\n    if len(string_digitada) &lt;= 2:\n        # Se for muito pequena, imprime \"String muito pequena\" e continua à próxima iteração do loop.\n        print(\"String muito pequena\")\n        continue\n    \n    # Verifica se a string digitada é diferente de \"sair\", ignorando maiúsculas e minúsculas.\n    if string_digitada.lower() != \"sair\":\n        # Se for diferente de \"sair\", imprime \"Mais uma vez:\" e continua para a próxima iteração do loop.\n        print(\"Mais uma vez:\")\n\n    # Imprime \"Tente digitar \\\"sair\\\"\" se a string digitada não for \"sair\".\n    print(\"Tente digitar \\\"sair\\\"\")\nAgora, veja uma das possíveis saídas para o código acima.\nDigite uma palavra: Aí\nString muito pequena\nDigite uma palavra: Saída\nMais uma vez:\nTente digitar \"sair\"\nDigite uma palavra: Será que eu consigo digitar \"sair\"?\nMais uma vez:\nTente digitar \"sair\"\nDigite uma palavra: Sa\nString muito pequena\nDigite uma palavra: Agora foi quase!\nMais uma vez:\nTente digitar \"sair\"\nDigite uma palavra: Sair\nFim!\n\n\nCódigo\n# Loop externo: itera sobre os números de 2 a 8 (n).\nfor n in range(2, 9):\n  # Loop interno: itera sobre os números de 2 a n-1 (x).\n  for x in range(2, n):\n    # Verifica se n é divisível por x (resto da divisão igual a 0).\n    if n % x == 0:\n      # Se for divisível, imprime a mensagem indicando que n não é primo e o resultado da divisão.\n      print(n, 'é igual a ', x, '*', n//x)\n      # Sai do loop interno (break).\n      break\n    else:\n      # Se não for divisível por x, imprime a mensagem indicando que n é primo.\n      print(n, 'é um número primo')\n      # Sai do loop interno (break).\n      break\n\n\n3 é um número primo\n4 é igual a  2 * 2\n5 é um número primo\n6 é igual a  2 * 3\n7 é um número primo\n8 é igual a  2 * 4\n\n\n\n\nCódigo\n# Itera pelos números no intervalo de 2 a 9 (inclusive).\nfor num in range(2, 10):\n  # Verifica se o número atual (num) é par, ou seja, se o resto da divisão por 2 é 0.\n  if num % 2 == 0:\n    # Se o número for par, imprime a mensagem \"Número par:\" seguido do número.\n    print(\"Número par:\", num)\n    # Pula para a próxima iteração do loop, ignorando o restante do código dentro do loop para este número.\n    continue\n  # Se o número não for par (ou seja, for ímpar), imprime a mensagem \"Número ímpar:\" seguido do número.\n  print(\"Número ímpar:\", num)\n\n\nNúmero par: 2\nNúmero ímpar: 3\nNúmero par: 4\nNúmero ímpar: 5\nNúmero par: 6\nNúmero ímpar: 7\nNúmero par: 8\nNúmero ímpar: 9\n\n\n\n2.4.2.1 List Comprehension\nList Comprehension em Python: Criando listas de forma concisa e elegante List Comprehension (compreensão de listas) é uma forma concisa e poderosa de criar listas em Python. Ela permite que você construa novas listas a partir de listas existentes, aplicando expressões e condições de forma direta e intuitiva.\n[Input]: nova_lista = [expressão for item in iteravel if condicao]\nExemplos:\n\nDada a lista: numeros = [1, 2, 3, 4, 5], crie uma nova lista que contém o quadrado desses números.\n\n\n\nCódigo\n# Lista inicial\nnumeros = [1, 2, 3, 4, 5]\n\n# Lista que contém o quadrado dos num da lista inicial\nquadrados = [x**2 for x in numeros]\nquadrados\n\n\n[1, 4, 9, 16, 25]\n\n\n\nDada uma lista de formada pelos números de 0 a 9. Capture os números pares em uma nova lista\n\n\n\nCódigo\n# Números de 0 a 9\nnumeros = range(10)\n\n# Lista contendo somente num pares\npares = [x for x in numeros if x % 2 == 0]\npares\n\n\n[0, 2, 4, 6, 8]\n\n\n\nPensando em uma resolução binária.\n\n\n\nCódigo\nbinario = [1 if x % 2 == 0 else 0 for x in numeros]\nbinario\n\n\n[1, 0, 1, 0, 1, 0, 1, 0, 1, 0]\n\n\n\nDada uma lista de palavras, crie uma nova lista que contenha o tamanho das strings.\n\n\n\nCódigo\n# Lista de palavras\npalavras = [\"Python\", \"é\", \"legal\", \"e\", \"poderoso\"]\n\n# Lista com o tamanho de cada palavra\ntamanhos = [len(palavra) for palavra in palavras]\ntamanhos\n\n\n[6, 1, 5, 1, 8]\n\n\n\nDada uma lista de com os graus de celsius, crie uma lista com a conversão da medida de celsius para fahrenheit.\n\n\n\nCódigo\ncelsius = [0, 10, 20, 30]\nfahrenheit = [(temp * 9/5) + 32 for temp in celsius]\nfahrenheit\n\n\n[32.0, 50.0, 68.0, 86.0]\n\n\n\nDada uma lista de números positivos e negativos, filtre para uma nova lista somente os números positivos.\n\n\n\nCódigo\n# Lista de positivos e negativos\nnumeros = [-5, -2, 0, 3, 7, -3.5, 4.89, 1.01]\n\n# Lista de positivos\npositivos = [x for x in numeros if x &gt; 0]\npositivos\n\n\n[3, 7, 4.89, 1.01]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#funções",
    "href": "basic.html#funções",
    "title": "2  1º Módulo: Python Básico",
    "section": "2.5 Funções",
    "text": "2.5 Funções\nUma função é uma sequência de instruções que executa uma operação específica de computação. Ao definir uma função, você especifica um nome e a sequência de instruções que serão executadas quando a função for chamada pelo nome.\nA ideia é semelhante às funções matemáticas, mas, em linguagens de programação, as funções não se restringem a realizar apenas cálculos. Elas podem realizar uma ampla variedade de tarefas, como manipulação de dados, operações de entrada e saída, entre outras.\nEm Python, funções são blocos de código reutilizáveis que ajudam a organizar e modularizar um programa. Elas recebem dados de entrada, chamados de argumentos, aplicam uma sequência de operações sobre esses dados e, opcionalmente, retornam um resultado, conhecido como valor de retorno. Essa relação é análoga à definição de função na matemática, onde cada elemento de um conjunto (domínio) é associado a um único elemento de outro conjunto (imagem).\nVimos o type(), um exemplo de função:\n[Input]  : type(23)\n[Output] : int\n[Input]  : type('textinho')\n[Output] : str\nDefini-se função de forma que:\n[Input]  : def NOME_DA_FUNÇÃO(parâmetro_1, parâmetro_2, ..., parâmetro_n):\n               &lt;1º comando&gt;\n               &lt;2º comando&gt;\n               ...\n               &lt;n-ésimo comando&gt;\n\n               print(var_1, var_2, ..., var_n) ou retun var_1, var_2, ..., var_n\n\nNota: Assim como nas estruturas de decisão e loops, as funções em Python é necessário utilizar os dois pontos (:) seguidos de uma indentação para indicar que um bloco de código pertence a essas estruturas.\n\nVeja exemplos:\n\n\nCódigo\ndef soma():\n  print(1 + 1)\n\n\n\n\nCódigo\nsoma()\n\n\n2\n\n\n\n\nCódigo\ndef soma():\n  return 1 + 1\n\n\n\n\nCódigo\nsoma()\n\n\n2\n\n\nQual a diferença entre utilizar print() e return aqui em cima?!?\n\n\nCódigo\n# Definindo a função `soma`\ndef soma():\n  print(1 + 1)\n\n# Executando a função\nsoma()\n\n\n2\n\n\n\n\nCódigo\n# Atribuindo o resultado de `soma` a uma variável `a`\na = soma()\n\n\n2\n\n\nCódigo\n\n# Chamando o valor de `a`\na # Note que a = 2, porém\n\n\n\n\nCódigo\n# Definindo a função `soma`\ndef soma():\n  return 1 + 1\n\n# Executando a função\nsoma()\n\n\n2\n\n\n\n\nCódigo\n# Atribuindo o resultado de `soma` a uma variável `b`\nb = soma()\n\n# Chamando o valor de `b`\nb\n\n\n2\n\n\nTal diferênça surge porque a função print() é usado somente para imprimir as informações/resultados na tela. Com isso, não é possível atribuir uma impressão à uma variável.\nPor isso, quando desejarmos guardar (atribuir) os valores resultantes de uma função devemos usar return.\n\n2.5.1 Funções com Argumentos\nQueremos multiplicar um número qualquer, \\(x\\), por \\(2\\) e somar com \\(3\\), assim, a função em Python pode ser escrita dessa forma:\n\n\nCódigo\ndef linear(x):\n  return 2 * x + 3\n\n\n\n\nCódigo\nlinear(1)\n\n\n5\n\n\n\n\nCódigo\nlinear(2)\n\n\n7\n\n\nComo posso calcular a tabuada de um número onde tal número é o dado de entrada? Veja:\n\n\nCódigo\ndef tabuada_num(num):\n  for n in range(1, 11):\n    print(f'{num} x {n} = {num * n}')\n\n\n\n\nCódigo\ntabuada_num(7)\n\n\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n\n\n\n\nCódigo\ntabuada_num(13)\n\n\n13 x 1 = 13\n13 x 2 = 26\n13 x 3 = 39\n13 x 4 = 52\n13 x 5 = 65\n13 x 6 = 78\n13 x 7 = 91\n13 x 8 = 104\n13 x 9 = 117\n13 x 10 = 130\n\n\n\n\nCódigo\ntabuada_num(1.5)\n\n\n1.5 x 1 = 1.5\n1.5 x 2 = 3.0\n1.5 x 3 = 4.5\n1.5 x 4 = 6.0\n1.5 x 5 = 7.5\n1.5 x 6 = 9.0\n1.5 x 7 = 10.5\n1.5 x 8 = 12.0\n1.5 x 9 = 13.5\n1.5 x 10 = 15.0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#aulas-faltadas",
    "href": "basic.html#aulas-faltadas",
    "title": "2  1º Módulo: Python Básico",
    "section": "1. Aulas Faltadas:",
    "text": "1. Aulas Faltadas:\nDavinir não gosta de ir às aulas, mas ele precisa comparecer a pelo menos 75% delas. Sabendo que há duas aulas por semana durante quatro meses, ajude Davinir a calcular:\n\n\nQuantas aulas ele pode faltar.\n\n\nQuantas aulas ele deve assistir para não ser reprovado.\n\n\n\nNota: Um mês tem quatro semanas.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#área-de-um-círculo",
    "href": "basic.html#área-de-um-círculo",
    "title": "2  1º Módulo: Python Básico",
    "section": "2. Área de um Círculo:",
    "text": "2. Área de um Círculo:\nCalcule a área de um círculo de raio R = 2. Crie uma função chamada calcula_area que receba o valor do raio e retorne a área.\n\n\nTeste a função com diferentes valores de raio, como 3.5 e 7.\n\n\n\nLembrete: a área de um círculo é dada por:\n\\[A = \\pi R^{2}\\]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#conversão-de-tempo",
    "href": "basic.html#conversão-de-tempo",
    "title": "2  1º Módulo: Python Básico",
    "section": "3. Conversão de Tempo:",
    "text": "3. Conversão de Tempo:\nEscreva uma função chamada converte_tempo que converta uma quantidade de tempo dada em horas, minutos e segundos para apenas segundos. Teste a função com os seguintes valores:\n\n\n3 horas, 23 minutos e 17 segundos.\n\n\n2 horas, 45 minutos e 50 segundos.\n\n\n0 horas, 30 minutos e 15 segundos.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#expressão-matemática",
    "href": "basic.html#expressão-matemática",
    "title": "2  1º Módulo: Python Básico",
    "section": "4. Expressão Matemática:",
    "text": "4. Expressão Matemática:\nResolva as expressões abaixo usando o Python:\n\n\n\\[\\dfrac{100 − 413 \\cdot (20 − 5 \\times 4)}{5}\\]\n\n\n\\[\\dfrac{ \\left[(3^{4} + \\sqrt{144})(100 - 95,5) \\right] + 6 }{-80 + 2^{4}}\\]\n\n\n\\[3,9 \\cdot 10^{-2} + 5,2 \\cdot 10^{-3}\\]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#média-ponderada",
    "href": "basic.html#média-ponderada",
    "title": "2  1º Módulo: Python Básico",
    "section": "5. Média Ponderada:",
    "text": "5. Média Ponderada:\nEscreva um script para calcular a média ponderada de 4 notas. Considere pesos 0.1, 0.2, 0.3 e 0.4 para cada avaliação. Use variáveis e print() para exibir o resultado.\n\n\nModifique o script para permitir a entrada das notas e dos pesos pelo usuário.\n\n\nGaranta que os pesos somem 1.0; caso contrário, exiba uma mensagem de erro.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#divisão-de-contas",
    "href": "basic.html#divisão-de-contas",
    "title": "2  1º Módulo: Python Básico",
    "section": "6. Divisão de Contas:",
    "text": "6. Divisão de Contas:\nVocê e seus amigos foram ao supermercado e compraram:\n\n75 latas de cerveja: R$ 2,20 cada (da ruim ainda, pra fazer o dinheiro render);\n2 pacotes de macarrão: R$ 8,73 cada;\n1 pacote de molho de tomate: R$ 3,45;\n420g de cebola: R$ 5,40/kg;\n250g de alho: R$ 30/kg;\n450g de pães franceses: R$ 25/kg;\n\nCalcule: - a) O valor total da compra. - b) Quanto cada um deve pagar, considerando que são 4 pessoas. - c) O valor da compra se houvesse um desconto de 5% nas latas de cerveja.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#investimento",
    "href": "basic.html#investimento",
    "title": "2  1º Módulo: Python Básico",
    "section": "7. Investimento:",
    "text": "7. Investimento:\nSuponha que você tenha R$ 100,00 para investir, com um retorno de 10% ao ano. Após 7 anos, quanto dinheiro você terá?\n\n\nImplemente uma função que calcule esse valor para qualquer número de anos e taxa de retorno.\n\n\nSimule o investimento para retornos de 5%, 10% e 15% ao ano.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#conversão-de-moeda",
    "href": "basic.html#conversão-de-moeda",
    "title": "2  1º Módulo: Python Básico",
    "section": "8. Conversão de Moeda:",
    "text": "8. Conversão de Moeda:\nCom a cotação do dólar a R$ 3,25, quanto você teria ao cambiar R$ 65,00? Escreva um script que permita ao usuário inserir o valor em reais e a cotação para calcular o valor em dólares.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#média-aritmética-geométrica-e-harmônica",
    "href": "basic.html#média-aritmética-geométrica-e-harmônica",
    "title": "2  1º Módulo: Python Básico",
    "section": "9. Média Aritmética, Geométrica e Harmônica:",
    "text": "9. Média Aritmética, Geométrica e Harmônica:\nAbelindo precisa decidir como calcular a média final de Rondinelly, que obteve as seguintes notas: 8.66, 5.35, 5 e 1.\n\n\nCalcule a média aritmética (M.A.), geométrica (M.G.) e harmônica (M.H.) dessas notas.\n\n\nQual dessas médias dá a maior nota para Rondinelly?\n\n\n\nMédia Aritimética: \\[MA = \\dfrac{\\sum_{i = 1}^{n} x_{i}}{n}\\] Média Geométrica: \\[MG = \\sqrt[n]{\\Pi_{i = 1}^{n} x_{i}}\\] Média Harmônica: \\[MH =  \\dfrac{n}{\\sum_{i = 1}^{n} \\frac{1}{x_{i}}}\\]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#compras-internacionais",
    "href": "basic.html#compras-internacionais",
    "title": "2  1º Módulo: Python Básico",
    "section": "10. Compras Internacionais:",
    "text": "10. Compras Internacionais:\nJosefson deseja comprar na China um celular de USD 299,99, uma chaleira de USD 23,87, um gnomo de jardim de USD 66,66 e 6 adesivos de unicórnio de USD 1,42 cada. O frete para Rolândia, no Paraná, é de USD 12,34.\n\n\nCalcule o valor total da compra em dólares.\n\n\nUsando o valor do dólar do exercício anterior, calcule o preço final em reais.\n\n\nCalcule quanto Josefson pagou apenas de IOF (6,38%).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#manipulação-de-strings",
    "href": "basic.html#manipulação-de-strings",
    "title": "2  1º Módulo: Python Básico",
    "section": "11. Manipulação de Strings:",
    "text": "11. Manipulação de Strings:\nDada a frase “Python é muito legal”, use fatiamento para:\n\n\nCriar uma variável contendo cada palavra.\n\n\nCalcular o tamanho da frase e de cada palavra.\n\n\nUse slicing para inverter a string “Python”.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#listas-e-listas-aninhadas",
    "href": "basic.html#listas-e-listas-aninhadas",
    "title": "2  1º Módulo: Python Básico",
    "section": "12. Listas e Listas Aninhadas:",
    "text": "12. Listas e Listas Aninhadas:\n\n3.1 Crie três listas:\na)  Frutas\n\n\nDocinhos de festa (inclua brigadeiros)\n\n\nIngredientes de feijoada\n\n\n3.2 Crie uma lista de listas chamada listona e execute os seguintes passos:\nd)  Acesse o elemento \"brigadeiro\".\n\n\nAdicione mais brigadeiros à lista de docinhos de festa. O que aconteceu com a lista original?\n\n\nAdicione bebidas ao final da listona, sem criar uma nova lista.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#manipulação-de-listas",
    "href": "basic.html#manipulação-de-listas",
    "title": "2  1º Módulo: Python Básico",
    "section": "13. Manipulação de Listas:",
    "text": "13. Manipulação de Listas:\nUsando a listona do exercício anterior:\n\n\nRemova todos os elementos usando del até que a lista fique vazia.\n\n\nVerifique se a lista está vazia usando uma estrutura de controle.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#dicionários-1",
    "href": "basic.html#dicionários-1",
    "title": "2  1º Módulo: Python Básico",
    "section": "14. Dicionários:",
    "text": "14. Dicionários:\n\n\nCrie um dicionário com as 5 pessoas mais próximas de você, usando o nome como chave e a cor da camisa como valor.\n\n\nCrie um dicionário semana = {} e complete-o com os dias da semana como chave e uma lista de aulas como valor.\n\n\nCrie um dicionário filmes = {} com 5 filmes como chave e, como valor, outro dicionário contendo vilão e ano de lançamento.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#doação-de-sangue",
    "href": "basic.html#doação-de-sangue",
    "title": "2  1º Módulo: Python Básico",
    "section": "15. Doação de Sangue:",
    "text": "15. Doação de Sangue:\nCrie um programa que verifique se uma pessoa pode doar sangue com base nos critérios:\n\n\nTer entre 16 e 69 anos.\n\n\nPesar mais de 50 kg.\n\n\nTer dormido pelo menos 6 horas nas últimas 24 horas.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#equação-do-segundo-grau",
    "href": "basic.html#equação-do-segundo-grau",
    "title": "2  1º Módulo: Python Básico",
    "section": "16. Equação do Segundo Grau:",
    "text": "16. Equação do Segundo Grau:\nCrie uma função que receba os coeficientes a, b e c de uma equação do segundo grau e determine se a equação possui duas raízes reais, uma, ou nenhuma.\n\n\nCalcule e imprima as raízes, se existirem.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#média-com-conceito",
    "href": "basic.html#média-com-conceito",
    "title": "2  1º Módulo: Python Básico",
    "section": "17. Média com Conceito:",
    "text": "17. Média com Conceito:\nMelhore o código de cálculo da média ponderada do Exercício 5 de um(a) aluno(a), incluindo um conceito final com base na média:\n\n\n9.00 - 10.00: Excelente\n\n\n7.00 - 8.99: Bom\n\n\n5.00 - 6.99: Regular\n\n\n0.00 - 4.99: Insuficiente",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#estatísticas-de-grupo",
    "href": "basic.html#estatísticas-de-grupo",
    "title": "2  1º Módulo: Python Básico",
    "section": "18. Estatísticas de Grupo:",
    "text": "18. Estatísticas de Grupo:\nLeia do teclado a idade e o sexo de 10 pessoas e calcule:\n\n\nIdade média das mulheres.\n\n\nIdade média dos homens.\n\n\nIdade média do grupo.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#somatório",
    "href": "basic.html#somatório",
    "title": "2  1º Módulo: Python Básico",
    "section": "19. Somatório:",
    "text": "19. Somatório:\nCalcule e imprima o somatório dos números de 1 a 100.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#sequência-de-fibonacci",
    "href": "basic.html#sequência-de-fibonacci",
    "title": "2  1º Módulo: Python Básico",
    "section": "20. Sequência de Fibonacci:",
    "text": "20. Sequência de Fibonacci:\nEscreva um código que gere a sequência de Fibonacci \\(n\\) termos definido pelo usuário.\nLembrando que: \\[F_{n} = \\begin{cases}\n0 \\ , \\text{ se } n = 1 \\\\\n1 \\ , \\text{ se } n = 2 \\\\\nF_{n - 2} + F_{n - 1} \\ , \\text{ para os demais casos}\n\\end{cases}\\]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#fatorial",
    "href": "basic.html#fatorial",
    "title": "2  1º Módulo: Python Básico",
    "section": "21. Fatorial:",
    "text": "21. Fatorial:\nDesenvolva uma função que retorne o valor do fatorial de um número inteiro fornecido pelo usuário.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#listas-1",
    "href": "basic.html#listas-1",
    "title": "2  1º Módulo: Python Básico",
    "section": "22. Listas:",
    "text": "22. Listas:\nCrie uma lista contendo o quadrado de todos os números ímpares entre 1 e 20.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#lista-de-tuplas",
    "href": "basic.html#lista-de-tuplas",
    "title": "2  1º Módulo: Python Básico",
    "section": "21. Lista de Tuplas:",
    "text": "21. Lista de Tuplas:\nCrie uma lista de tuplas onde cada tupla contenha o número e seu cubo, para números de 1 a 10. Exemplo: [(1, 1), (2, 8), (3, 27), ...]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#extra.-sistema-de-controle-de-estoque-e-vendas-de-uma-loja",
    "href": "basic.html#extra.-sistema-de-controle-de-estoque-e-vendas-de-uma-loja",
    "title": "2  1º Módulo: Python Básico",
    "section": "EXTRA. Sistema de Controle de Estoque e Vendas de uma Loja",
    "text": "EXTRA. Sistema de Controle de Estoque e Vendas de uma Loja\nUma loja de conveniência deseja criar um sistema simples para gerenciar o estoque e calcular o valor total das vendas diárias. O sistema deve ser capaz de:\n\nCadastrar Produtos: Permitir a inserção de novos produtos no estoque. Cada produto deve ter as seguintes informações:\n\nNome do produto (string)\nPreço unitário (float)\nQuantidade em estoque (inteiro)\n\nAtualizar Estoque: Aumentar ou diminuir a quantidade de um produto específico.\nRealizar Venda:\n\nPerguntar ao usuário quais produtos ele deseja comprar e a quantidade de cada um.\nVerificar se a quantidade em estoque é suficiente para a venda.\nCaso seja suficiente, atualizar o estoque e calcular o valor total da venda.\nCaso contrário, exibir uma mensagem informando que a quantidade em estoque é insuficiente.\n\nRelatório de Vendas: Ao final do dia, o sistema deve gerar um relatório contendo:\n\nProdutos vendidos e quantidade vendida de cada um.\nValor total arrecadado.\n\n\nDesafio Extra:\n\nImplemente uma função que calcule um desconto progressivo para as vendas:\n\n5% para compras acima de R$ 100,00.\n10% para compras acima de R$ 200,00.\n15% para compras acima de R$ 500,00.\n\nAdicione a opção de reabastecimento automático: se a quantidade de um produto no estoque estiver abaixo de um determinado valor, reabasteça automaticamente para a quantidade inicial.\n\n\nDicas:\n\n\n\nUse um dicionário para armazenar os produtos e suas informações.\nCrie funções para cada uma das funcionalidades do sistema (cadastrar produtos, atualizar estoque, realizar venda, gerar relatório).\nUtilize loops e condições para controlar o fluxo do programa.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  },
  {
    "objectID": "basic.html#extra.-sistema-de-cadastro-de-alunos-e-notas",
    "href": "basic.html#extra.-sistema-de-cadastro-de-alunos-e-notas",
    "title": "2  1º Módulo: Python Básico",
    "section": "EXTRA. Sistema de Cadastro de Alunos e Notas",
    "text": "EXTRA. Sistema de Cadastro de Alunos e Notas\nCrie um programa para gerenciar o cadastro de alunos e suas notas em uma escola. O programa deve:\n\nCadastrar Alunos:\n\nO usuário deve ser capaz de cadastrar novos alunos, informando o nome e uma lista de notas (mínimo de 3 e máximo de 5 notas).\n\nConsultar Alunos:\n\nO usuário deve ser capaz de consultar um aluno específico e visualizar suas notas e média.\n\nCalcular Média e Conceito:\n\nA média deve ser calculada e um conceito deve ser atribuído ao aluno de acordo com a média:\n\nA: Média ≥ 9.0\nB: 7.0 ≤ Média &lt; 9.0\nC: 5.0 ≤ Média &lt; 7.0\nD: 3.0 ≤ Média &lt; 5.0\nE: Média &lt; 3.0\n\n\nAlterar Notas:\n\nO usuário deve ser capaz de alterar as notas de um aluno específico.\n\nGerar Relatório Geral:\n\nExibir um relatório contendo todos os alunos, suas médias e seus conceitos.\n\nDesafios Extras:\n\nCalcular a média da turma e o número de alunos em cada conceito.\nEncontrar o aluno com a maior média e o aluno com a menor média.\n\n\n\nDicas:\n\n\n\nUtilize dicionários para armazenar as informações dos alunos e suas notas.\nCrie funções para cada uma das funcionalidades do sistema (cadastrar aluno, consultar aluno, calcular média, alterar notas, gerar relatório).\nUse loops e estruturas de controle para gerenciar as operações.\nExplore a manipulação de strings para melhorar a visualização dos dados no relatório.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1º Módulo: Python Básico</span>"
    ]
  }
]